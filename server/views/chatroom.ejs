<html>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hang'n Chat Room</title>
    <link rel="stylesheet" href="/styles/chatstyles.css">
    <script src="/socket.io/socket.io.js"></script>
</head>

<body>
    <h1>Hang'n Chat App!</h1>
    <div class="addfriend">
        <%- include('addFriendModal') %>
    </div>

    <div id="chatContainer">
        <div id="friendsList"></div>

        <div id="chatMessages">

        </div>
        <% if (friendsList && friendsList.length> 0) { %>
            <div id="chat-panels"></div>

            <% friendsList.forEach((friend)=> { %>
                <div class="chat-panel" id="chat-<%= friend.userId %>">
                    <div class="message-container">
                        <% messages.forEach((message)=> {
                            const sender = friendsList.find((f) => f.userId === message.from);
                            const senderUsername = sender ? sender.username : "Unknown";
                            %>
                            <div class="message <%= (message.from === userId) ? 'outgoing' : 'incoming' %>">
                                <%= senderUsername %>: <%= message.content %>
                            </div>
                            <% }); %>
                    </div>
                </div>
                <% }); %>
    </div>
    <% } else { %>
        <div class="no-friends">
            <p>You've got no friends</p>
        </div>
        <% } %>
            </div>

            <div id="selectedFriendChat" style="display: none;"></div>
            <div id="selectedFriendChatMessages"></div>

            <div id="messageInput">
                <form id="chat-form" method="POST">
                    <input type="text" id="message" name="message" placeholder="Type here" autocomplete="off">
                    <button type="submit">Send</button>
                </form>
            </div>
            </div>

            <script>

                const userId = '<%= user.userId %>';
                let selectedFriendId;
                messages = [];
                friendsList = [];
                fetchAndAppendToMessages(userId);
                fetchAndAppendToFriendsList(userId);

                socket.on("messages", (receivedMessages) => {
                    console.log(receivedMessages);
                    messages.push(...receivedMessages);
                    updateChatMessages(messages, userId);
                });
                function updateChatMessages(messages, userId, friendId) {
                    const selectedFriendChatMessages = document.getElementById("selectedFriendChatMessages");
                    selectedFriendChatMessages.innerHTML = "";

                    messages.forEach((message) => {
                        if ((message.from === userId || message.to === userId) && (message.from === friendId || message.to === friendId)) {
                            const messageElement = document.createElement("div");
                            const senderUsername = (message.from === userId) ? "You" : friendsList.find(friend => friend.userId === message.from)?.username || "Unknown";
                            messageElement.textContent = `${senderUsername}: ${message.content}`;
                            messageElement.classList.add((message.from === userId) ? "outgoing" : "incoming");

                            const chatPanel = document.getElementById(`chat-${friendId}`);
                            chatPanel.appendChild(messageElement);
                        }
                    });
                }

                socket.on("friends", (friendsList) => {
                    const tabsContainer = document.getElementById("friendsList");
                    tabsContainer.innerHTML = "";

                    selectedFriendId = undefined;

                    const chatPanelsContainer = document.getElementById("chat-panels"); // Add this line

                    friendsList.forEach((friend) => {
                        const tab = document.createElement("div");
                        tab.textContent = friend.username;
                        tab.classList.add("friend-tab");
                        tabsContainer.appendChild(tab);

                        tab.addEventListener("click", () => {
                            selectedFriendId = friend.userId;
                            const chatPanels = document.querySelectorAll(".chat-panel");

                            chatPanels.forEach((panel) => {
                                panel.classList.remove("active"); // Hide all chat panels
                            });

                            const selectedFriendChat = document.getElementById(`chat-${selectedFriendId}`);
                            if (selectedFriendChat) {
                                selectedFriendChat.classList.add("active"); // Show the selected friend's chat panel
                            } else {
                                // Create the chat panel if it doesn't exist
                                const chatPanel = document.createElement("div");
                                chatPanel.classList.add("chat-panel");
                                chatPanel.id = `chat-${selectedFriendId}`;
                                chatPanelsContainer.appendChild(chatPanel);
                            }

                            console.log("Switching to chat with", friend);

                            // Update chat messages for the selected friend
                            updateChatMessages(messages, userId, selectedFriendId);
                        });
                    });

                    console.log("Received friendsList from server:", friendsList);
                });


                const chatForm = document.getElementById("chat-form");
                const messageInput = document.getElementById("message");

                async function sendMessage(content, selectedFriendId) {
                    if (content.trim() !== "" && selectedFriendId) {
                        const message = {
                            to: selectedFriendId,
                            content: content,
                            from: userId
                        };

                        try {
                            console.log("Before emitting message:", message);
                            await socket.emit("directMessage", message);
                            console.log("After emitting message:", message);

                            messages.push(message);
                            updateChatMessages(messages, userId);
                        } catch (error) {
                            console.error("Error emitting directMessage:", error);
                        }
                    }
                }

                chatForm.addEventListener("submit", async (event) => {
                    event.preventDefault();
                    const content = messageInput.value;
                    sendMessage(content, selectedFriendId);
                    messageInput.value = "";
                });

                socket.on("directMessage", (message) => {
                    updateChatMessages([message]);
                });

                async function fetchAndAppendToMessages(userId) {
                    try {
                        const response = await fetch("http://localhost:8080/api/messages");
                        const data = await response.json();
                        console.log(data);

                        if (data.messages && Array.isArray(data.messages)) {
                            messages.push(...data.messages);
                            console.log("Messages:", messages);
                        } else {
                            console.error("Invalid response data:", data);
                        }
                    } catch (error) {
                        console.error("Error fetching messages:", error);
                    }
                }
                async function fetchAndAppendToFriendsList(userId) {
                    try {
                        const response = await fetch("http://localhost:8080/api/friendslist");
                        const data = await response.json();

                        if (data.friendsList && Array.isArray(data.friendsList)) {
                            friendsList.push(...data.friendsList);
                            console.log("FriendsList:", friendsList);
                        } else {
                            console.error("Invalid response data:", data);
                        }
                    } catch (error) {
                        console.error("Error fetching the friendslist:", error);
                    }
                }
            </script>
</body>

</html>