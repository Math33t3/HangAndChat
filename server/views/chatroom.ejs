<html>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hang'n Chat Room</title>
    <link rel="stylesheet" href="/styles/hangmanstyle.css">
    <script src="/socket.io/socket.io.js"></script>
</head>

<body>
    <div class="main-container">
        <%- include('navbar.ejs') %>
            <div class="addfriend">
                <%- include('addFriendModal') %>
            </div>

            <div id="chatContainer">
                <div id="friendsList"></div>

                <div id="chatMessages"></div>
                <div id="chat-panels"></div>
                <% if (friendsList && friendsList.length> 0) { %>
                    <% friendsList.forEach((friend)=> { %>
                        <div class="chat-panel" id="chat-<%= friend.userId %>">
                            <div class="message-container">
                                <% messages.forEach((message)=> {
                                    const sender = friendsList.find((f) => f.userId === message.from);
                                    const senderUsername = sender ? sender.username : "Unknown";
                                    %>
                                    <div class="message <%= (message.from === userId) ? 'outgoing' : 'incoming' %>">
                                        <%= senderUsername %>: <%= message.content %>
                                    </div>
                                    <% }); %>
                            </div>
                        </div>
                        <% }); %>
            </div>
            <% } else { %>
                <div class="no-friends">
                    <p>You've got no friends</p>
                </div>
                <% } %>


                    <div id="selectedFriendChat" style="display: none;"></div>
                    <div id="selectedFriendChatMessages"></div>

                    <div id="messageInput">
                        <form id="chat-form" method="POST">
                            <input type="text" id="message" name="message" placeholder="Type here" autocomplete="off">
                            <button type="submit">Send</button>
                        </form>
                    </div>
    </div>




    <script>
        const userId = '<%= user.userId %>';
        let selectedFriendId;
        messages = [];
        friendsList = [];
        fetchAndAppendToMessages(userId);
        fetchAndAppendToFriendsList(userId);

        /*socket.on("messages", (receivedMessages) => {
            console.log(receivedMessages);
            messages.push(...receivedMessages);
            updateChatMessages(messages, userId);
        });*/

        function updateChatMessages(messages, userId, friendId) {
            const selectedFriendChatMessages = document.getElementById("selectedFriendChatMessages");
            selectedFriendChatMessages.innerHTML = "";

            messages.forEach((message) => {
                if ((message.from === userId || message.to === userId) && (message.from === friendId || message.to === friendId)) {
                    const messageElement = document.createElement("div");
                    const senderUsername = (message.from === userId) ? "You" : friendsList.find(friend => friend.userId === message.from)?.username || "Unknown";
                    messageElement.textContent = `${senderUsername}: ${message.content}`;
                    messageElement.classList.add((message.from === userId) ? "outgoing" : "incoming");

                    selectedFriendChatMessages.appendChild(messageElement);
                }
            });
        }

        const chatForm = document.getElementById("chat-form");
        const messageInput = document.getElementById("message");

        chatForm.addEventListener("submit", async (event) => {
            event.preventDefault();
            const content = messageInput.value;
            sendMessage(content, selectedFriendId);
            messageInput.value = "";
        });

        socket.on("directMessage", (message) => {
            updateChatMessages([message]);
        });

        async function fetchAndAppendToMessages(userId) {
            try {
                const response = await fetch("http://localhost:8080/api/messages");
                const data = await response.json();
                console.log(data);

                if (data.messages && Array.isArray(data.messages)) {
                    messages.push(...data.messages);
                    console.log("Messages:", messages);
                } else {
                    console.error("Invalid response data:", data);
                }
            } catch (error) {
                console.error("Error fetching messages:", error);
            }
        }


        async function fetchAndAppendToFriendsList(userId) {
            try {
                const response = await fetch("http://localhost:8080/api/friendslist");
                const data = await response.json();

                if (data.friendsList && Array.isArray(data.friendsList)) {
                    friendsList.push(...data.friendsList);
                    console.log("FriendsList:", friendsList);


                    const tabsContainer = document.getElementById("friendsList");
                    tabsContainer.innerHTML = "";

                    friendsList.forEach((friend) => {
                        const tab = document.createElement("div");
                        tab.textContent = friend.username;
                        tab.classList.add("friend-tab");
                        tabsContainer.appendChild(tab);

                        tab.addEventListener("click", async () => {

                            selectedFriendId = friend.userId;
                            const chatPanels = document.querySelectorAll(".chat-panel");

                            chatPanels.forEach((panel) => {
                                panel.classList.remove("active");
                            });

                            let selectedFriendChat = document.getElementById(`chat-${selectedFriendId}`);
                            if (!selectedFriendChat) {
                                selectedFriendChat = document.createElement("div");
                                selectedFriendChat.classList.add("chat-panel", "active");
                                selectedFriendChat.id = `chat-${selectedFriendId}`;
                                document.getElementById("chat-panels").appendChild(selectedFriendChat);
                                selectedFriendChat = document.getElementById(`chat-${selectedFriendId}`);
                            } else {
                                selectedFriendChat.classList.add("active");
                            }

                            updateChatMessages(messages, userId, selectedFriendId);
                        });
                    });
                } else {
                    console.error("Invalid response data:", data);
                }
            } catch (error) {
                console.error("Error fetching the friendslist:", error);
            }
        }

        async function sendMessage(content, selectedFriendId) {
            if (content.trim() !== "" && selectedFriendId) {
                const message = {
                    to: selectedFriendId,
                    content: content,
                    from: userId
                };

                try {
                    await socket.emit("directMessage", message);
                    console.log("After emitting message:", message);

                    messages.push(message);
                    updateChatMessages(messages, userId);
                } catch (error) {
                    console.error("Error emitting directMessage:", error);
                }
            }
        }
    </script>